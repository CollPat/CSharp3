@page "/dashboard"
@using ToDoList.Domain.Models
@using ToDoList.Frontend.Clients
@using ToDoList.Frontend.Views
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

<thead>
    <tr>
        <th>
            <button @onclick="OrderById">Order by ID</button>
        </th>
        <th>
            <button @onclick="OrderByName">Order by Name</button>
        </th>

        <th>Completed</th>
        <th>Description</th>
    </tr>
</thead>

<table>

@if (toDoItems is null)
{
    <p>No items to display.</p>
}
else
{
    @foreach (var ToDoItem in toDoItems)
    {
        <tr>
            <td>@ToDoItem.ToDoItemId</td>
            <td>@ToDoItem.Name</td>
            <td>@ToDoItem.IsCompleted</td>
            <td>@ToDoItem.Description</td>
        </tr>
    }
}
</table>

@code
{
    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }

    private List<ToDoItemView>? toDoItems;
    public void OrderByName()
    {
        toDoItems = toDoItems?.OrderBy(item => item.Name).ToList();

    }

    public void OrderById()
    {
        toDoItems = toDoItems?.OrderBy(item => item.ToDoItemId).ToList();
    }
}
