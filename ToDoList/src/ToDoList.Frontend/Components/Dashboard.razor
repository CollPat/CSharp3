@page "/dashboard"
@using ToDoList.Domain.Models
@using ToDoList.Frontend.Clients
@using ToDoList.Frontend.Views
@inject IToDoItemsClient ToDoItemsClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<h1>Dashboard</h1>

<table class="table table-hover mt-3">
    <thead class="table-dark">
        <th>ID</th>
        <th>Name</th>
        <th>Description</th>
        <th>Completed</th>
        <th>Actions</th>
    </thead>

    <tbody>
        @if (toDoItems is null)
        {
            <p>No items to display.</p>
        }
        else
        {
            @foreach (var ToDoItem in toDoItems)
            {
                <tr class="table-secondary @GetCorrectClassFoTableLine(ToDoItem.IsCompleted)">
                    <td>@ToDoItem.ToDoItemId</td>
                    <td>@ToDoItem.Name</td>
                    <td>@ToDoItem.Description</td>
                    <td>@ToDoItem.IsCompleted</td>
                    <td><button class="btn btn-success" @onclick="()=>EditItem(ToDoItem)"> Edit </button></td>
                </tr>
            }
        }
    </tbody>

</table>

<button class="btn btn-dark" @onclick="OrderById">Order by ID</button>
<button class="btn btn-dark" @onclick="OrderByName">Order by Name</button>


@code
{
    protected string GetCorrectClassFoTableLine(bool isCompleted)
    {
        return isCompleted ? "table-success" : "table-secondary";
    }
    protected override async Task OnInitializedAsync()
    {
        toDoItems = await ToDoItemsClient.ReadItemsAsync();
    }

    private List<ToDoItemView>? toDoItems;
    public void OrderByName()
    {
        toDoItems = toDoItems?.OrderBy(item => item.Name).ToList();

    }

    public void OrderById()
    {
        toDoItems = toDoItems?.OrderBy(item => item.ToDoItemId).ToList();
    }

    public void EditItem(ToDoItemView toDoItem)
    {
        NavigationManager.NavigateTo($"editToDoItem/{toDoItem.ToDoItemId}");
    }
}
