@page "/editToDoItem/{ItemId:int}"
@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject NavigationManager NavigationManager
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer

<PageTitle>Edit To Do Item</PageTitle>

@if (ToDoItem is not null)
{
    <EditForm Model="ToDoItem" FormName="EditToDoItem" OnValidSubmit="Submit"> @*OnSubmit -> OnValidSubmit*@
        <DataAnnotationsValidator />
        <label for="Name" class="form-label">Name:</label>
        <InputText id="Name" class="form-control" @bind-Value="ToDoItem.Name" />
        <ValidationMessage For="() => ToDoItem.Name" />
        <label for="Description" class="form-label">Description:</label>
        <InputText id="Description" class="form-control" @bind-Value="ToDoItem.Description" />
        <ValidationMessage For="() => ToDoItem.Description" />
        <label for="IsCompleted" class="form-check-label">IsCompleted:</label>
        <InputCheckbox id="IsCompleted" class="form-check" @bind-Value="ToDoItem.IsCompleted" />
        <ValidationMessage For="() => ToDoItem.IsCompleted" />
        <label for="Category" class="form-label">Category:</label>
        <InputText id="Category" class="form-control" @bind-Value="ToDoItem.Category" />
        <button type="submit">Submit</button>
    </EditForm>
}

@code
{
    protected override async Task OnInitializedAsync()
    {
        ToDoItem = await ToDoItemsClient.ReadItemByIdAsync(ItemId);
    }
    [Parameter]
    public int ItemId { get; set; }
    [SupplyParameterFromForm]
    public ToDoItemView ToDoItem { get; set; }
    public async Task Submit()
    {
        await ToDoItemsClient.UpdateItemAsync(ToDoItem);
        NavigationManager.NavigateTo("/");
    }
}
