@page "/editToDoItem/{ItemId:int?}"
@using ToDoList.Frontend.Views
@using ToDoList.Frontend.Clients
@inject NavigationManager NavigationManager
@inject IToDoItemsClient ToDoItemsClient
@rendermode InteractiveServer

<PageTitle>@(IsNewItem ? "Add New To Do Item" : "Edit To Do Item")</PageTitle>

@if (ToDoItem is not null)
{
    <EditForm Model="ToDoItem" FormName="EditToDoItem" OnValidSubmit="Submit"> @*OnSubmit -> OnValidSubmit*@
        <DataAnnotationsValidator />
        <label for="Name" class="form-label">Name:</label>
        <InputText id="Name" class="form-control" @bind-Value="ToDoItem.Name" />
        <ValidationMessage For="() => ToDoItem.Name" />
        <label for="Description" class="form-label">Description:</label>
        <InputText id="Description" class="form-control" @bind-Value="ToDoItem.Description" />
        <ValidationMessage For="() => ToDoItem.Description" />
        <label for="IsCompleted" class="form-check-label">IsCompleted:</label>
        <InputCheckbox id="IsCompleted" class="form-check" @bind-Value="ToDoItem.IsCompleted" />
        <ValidationMessage For="() => ToDoItem.IsCompleted" />
        <label for="Category" class="form-label">Category:</label>
        <InputText id="Category" class="form-control" @bind-Value="ToDoItem.Category" />
        <button type="submit" class="btn btn-primary">@SubmitButtonText</button>
    </EditForm>
}

<button class="btn btn-secondary" @onclick="Cancel">Cancel</button>

@code
{
    [Parameter]
    public int ItemId { get; set; }

    public ToDoItemView ToDoItem { get; set; }
    private bool IsNewItem => ItemId == 0;
    private string SubmitButtonText => IsNewItem ? "Add Item" : "Save Changes";

    protected override async Task OnInitializedAsync()
    {
        if (IsNewItem)
        {

            ToDoItem = new ToDoItemView
                {
                    Name = string.Empty,
                    Description = string.Empty,
                    IsCompleted = false,
                    Category = string.Empty
                };
        }
        else
        {

            ToDoItem = await ToDoItemsClient.ReadItemByIdAsync(ItemId);
        }
    }

    public async Task Submit()
    {
        if (IsNewItem)
        {

            await ToDoItemsClient.CreateItemAsync(ToDoItem);
        }
        else
        {

            await ToDoItemsClient.UpdateItemAsync(ToDoItem);
        }


        NavigationManager.NavigateTo("/dashboard");
    }

    private void Cancel()
    {

        NavigationManager.NavigateTo("/dashboard");
    }
}
